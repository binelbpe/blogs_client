"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/utils/errorHandler.ts":
/*!***********************************!*\
  !*** ./src/utils/errorHandler.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getErrorMessage\": function() { return /* binding */ getErrorMessage; },\n/* harmony export */   \"handleAPIError\": function() { return /* binding */ handleAPIError; }\n/* harmony export */ });\nconst handleAPIError = (error)=>{\n    var _error_response;\n    if ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data) {\n        return {\n            status: error.response.data.status || \"error\",\n            message: error.response.data.message || \"Something went wrong\",\n            errors: error.response.data.errors\n        };\n    }\n    if (error.request) {\n        return {\n            status: \"error\",\n            message: \"No response from server. Please check your internet connection.\"\n        };\n    }\n    return {\n        status: \"error\",\n        message: error.message || \"An unexpected error occurred\"\n    };\n};\nconst getErrorMessage = (error, field)=>{\n    var _error_errors;\n    if (field && ((_error_errors = error.errors) === null || _error_errors === void 0 ? void 0 : _error_errors[field])) {\n        return error.errors[field];\n    }\n    return error.message;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvZXJyb3JIYW5kbGVyLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBTU8sTUFBTUEsaUJBQWlCLENBQUNDLFFBQXlCO1FBQ2xEQTtJQUFKLElBQUlBLENBQUFBLGtCQUFBQSxNQUFNQyxRQUFRLGNBQWRELDZCQUFBQSxLQUFBQSxJQUFBQSxnQkFBZ0JFLElBQUksRUFBRTtRQUN4QixPQUFPO1lBQ0xDLFFBQVFILE1BQU1DLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDQyxNQUFNLElBQUk7WUFDdENDLFNBQVNKLE1BQU1DLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDRSxPQUFPLElBQUk7WUFDeENDLFFBQVFMLE1BQU1DLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDRyxNQUFNO1FBQ3BDO0lBQ0YsQ0FBQztJQUVELElBQUlMLE1BQU1NLE9BQU8sRUFBRTtRQUNqQixPQUFPO1lBQ0xILFFBQVE7WUFDUkMsU0FDRTtRQUNKO0lBQ0YsQ0FBQztJQUVELE9BQU87UUFDTEQsUUFBUTtRQUNSQyxTQUFTSixNQUFNSSxPQUFPLElBQUk7SUFDNUI7QUFDRixFQUFFO0FBRUssTUFBTUcsa0JBQWtCLENBQUNQLE9BQWlCUSxRQUEyQjtRQUM3RFI7SUFBYixJQUFJUSxTQUFTUixDQUFBQSxDQUFBQSxnQkFBQUEsTUFBTUssTUFBTSxjQUFaTCwyQkFBQUEsS0FBQUEsSUFBQUEsYUFBYyxDQUFDUSxNQUFNLEdBQUU7UUFDbEMsT0FBT1IsTUFBTUssTUFBTSxDQUFDRyxNQUFNO0lBQzVCLENBQUM7SUFDRCxPQUFPUixNQUFNSSxPQUFPO0FBQ3RCLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3V0aWxzL2Vycm9ySGFuZGxlci50cz9iYjc1Il0sInNvdXJjZXNDb250ZW50IjpbImludGVyZmFjZSBBUElFcnJvciB7XHJcbiAgc3RhdHVzOiBzdHJpbmc7XHJcbiAgbWVzc2FnZTogc3RyaW5nO1xyXG4gIGVycm9ycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBoYW5kbGVBUElFcnJvciA9IChlcnJvcjogYW55KTogQVBJRXJyb3IgPT4ge1xyXG4gIGlmIChlcnJvci5yZXNwb25zZT8uZGF0YSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3RhdHVzOiBlcnJvci5yZXNwb25zZS5kYXRhLnN0YXR1cyB8fCBcImVycm9yXCIsXHJcbiAgICAgIG1lc3NhZ2U6IGVycm9yLnJlc3BvbnNlLmRhdGEubWVzc2FnZSB8fCBcIlNvbWV0aGluZyB3ZW50IHdyb25nXCIsXHJcbiAgICAgIGVycm9yczogZXJyb3IucmVzcG9uc2UuZGF0YS5lcnJvcnMsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgaWYgKGVycm9yLnJlcXVlc3QpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXR1czogXCJlcnJvclwiLFxyXG4gICAgICBtZXNzYWdlOlxyXG4gICAgICAgIFwiTm8gcmVzcG9uc2UgZnJvbSBzZXJ2ZXIuIFBsZWFzZSBjaGVjayB5b3VyIGludGVybmV0IGNvbm5lY3Rpb24uXCIsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHN0YXR1czogXCJlcnJvclwiLFxyXG4gICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB8fCBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWRcIixcclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEVycm9yTWVzc2FnZSA9IChlcnJvcjogQVBJRXJyb3IsIGZpZWxkPzogc3RyaW5nKTogc3RyaW5nID0+IHtcclxuICBpZiAoZmllbGQgJiYgZXJyb3IuZXJyb3JzPy5bZmllbGRdKSB7XHJcbiAgICByZXR1cm4gZXJyb3IuZXJyb3JzW2ZpZWxkXTtcclxuICB9XHJcbiAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJoYW5kbGVBUElFcnJvciIsImVycm9yIiwicmVzcG9uc2UiLCJkYXRhIiwic3RhdHVzIiwibWVzc2FnZSIsImVycm9ycyIsInJlcXVlc3QiLCJnZXRFcnJvck1lc3NhZ2UiLCJmaWVsZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/errorHandler.ts\n"));

/***/ })

});